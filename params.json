{"name":"Panorama","tagline":"A New Kind of Visual Debugger for Ruby","body":"# Panorama - A New Kind of Visual Debugger for Ruby\r\n\r\n*Note: This code is still at the remarkably bare-bones proof-of-concept stage, and shouldn't be considered usable for any kind of actual real debugging yet. But if you're interested in helping with a new kind of debugger, I'd love some help.*\r\n\r\nPanorama is a web-based visual debugger that's different from most. It's primarily inspired by the ideas of Bret Victor, especially those he presented in his essay [Learnable Programming](http://worrydream.com/#!/LearnableProgramming). It uses Ruby 2.0's new [TracePoint API](http://ruby-doc.org/core-2.0/TracePoint.html). I introduced it during my talk [\"Programming is Debugging, So Debug Better\"](https://speakerdeck.com/yozlet/programming-is-debugging-so-debug-better) at [Open Source Bridge 2013](http://opensourcebridge.org/).\r\n\r\nRather than stepping through your code in progress, it gathers all the data it can and presents it after execution has finished. It shows you:\r\n* every invocation of a Ruby method, whether in your code or someone else's\r\n* the arguments and return value of each method invocation\r\n* which lines were executed during that invocation\r\n* the values of each local variable at that line\r\n\r\n## Panorama's Actual Primary Aim\r\n\r\nTo be the debugging tool you use instead of adding `puts` statements all over your code.\r\n\r\nThis sounds like an easy goal. However, *all* the top Ruby coders I've interviewed about this (at least four of them - [see this slide](https://speakerdeck.com/yozlet/programming-is-debugging-so-debug-better?slide=59)) use `puts` as their first resort when debugging. So, can we make a better replacement?\r\n\r\n## Current Status\r\n\r\nLaughably poor. There's so much to be done:\r\n\r\n* Gem packaging\r\n* Actual tests\r\n* Actual documentation\r\n* Proper Sinatra app setup (using [Vegas](http://code.quirkey.com/vegas/)?)\r\n* Colour the run lines properly\r\n* Macros to invoke from within editors\r\n* Link to a test runner, so the code can be re-run continually\r\n* Bret-tastic loop value display\r\n* Can it work using Ruby 1.9's `set_trace_func()` ?\r\n* Some kind of thread/concurrency safety would be good - at present, it does Stupid Things With Globals\r\n* A billion other things\r\n\r\n## A Very Poor Screenshot\r\n\r\n![I did warn you.](http://yozlet.github.io/panorama/img/screenie1.png)\r\n\r\n## Getting Started\r\n\r\n**At present, Ruby 2.0 is required. If you need to run earlier versions of Ruby as well, I highly recommend the excellent [rbenv](http://github.com/sstephenson/rbenv/)**\r\n\r\n* Clone the repo to a nearby ditch\r\n* Run `bundle install`. (If you don't have `bundler` installed yet: `gem install bundler`)\r\n* To start the webapp: `bundle exec rerun gazer.rb`\r\n* Once you see `Listening on localhost:4567, CTRL+C to stop` , visit (http://localhost:4567) in your browser.\r\n\r\nAt present, the work is split between\r\n* `panorama.rb` - a set of TracePoint hooks which build an in-memory profile of running code\r\n* `gazer.rb` - a minimal Sinatra app which can invoke Panorama, then present the results as a browsable dataset\r\n\r\nOnce you have it running locally, click this for a browsable example: [http://localhost:4567/?codefile=.%2Fweb-test.rb](http://localhost:4567/?codefile=.%2Fweb-test.rb)\r\n\r\nIf you want to try using Panorama's TracePoint hooks without the web app, `cli-test.rb` is a simple example.\r\n\r\n## What Who How?\r\n\r\nI'm [Yoz Grahame](http://yoz.com/), and I work for [Neo Innovation](http://neo.com/). \r\n\r\nProblems or patches? [Check the issues](https://github.com/yozlet/panorama/issues), and if it you don't see your question addressed, [add one](https://github.com/yozlet/panorama/issues/new).\r\n\r\nIf this code is remotely interesting to you, I'd love to know. Send me email (I bet you can work it out) or [tweet at me](http://twitter.com/yoz).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}